#BlueJ class context
comment0.target=Game
comment0.text=\n\ A\ class\ that\ implements\ Game\ object,\ initliazes\ a\ new\ game,\ \n\ and\ loops\ to\ create\ a\ continuous\ game\ of\ tic-tac-toe\n\n\ @author\ Eric\ Wnorowski\n\ @version\ HW2\n
comment1.params=boardSize
comment1.target=Game(int)
comment1.text=\n\ Constructor\ for\ game\ objects\n\ @param\ \ size\ of\ the\ board\ user\ inputs\n
comment2.params=
comment2.target=int\ getBoardSize()
comment2.text=\n\ Simply\ returns\ the\ board\ size\ of\ the\ game\n\ \n\ @return\ the\ user's\ choosen\ board\ size\n
comment3.params=
comment3.target=void\ resetGame()
comment3.text=\n\ Resets\ game\ state\ once\ the\ game\ is\ over\n\ resets\ the\ game\ board\ to\ all\ empty\ spaces\n\ \n
comment4.params=move
comment4.target=char\ isValidMove(Move)
comment4.text=\n\ Checks\ to\ see\ if\ the\ move\ by\ computer/human\ is\ possible\n\ @param\ a\ Move\ -\ to\ be\ checked\n\ @return\ 'V'\ for\ valid,\ 'O'\ for\ occupied\ space,\ \n\ \ \ \ \ \ 'C'\ for\ invalid\ column\ input,\ 'R'\ for\ invalid\ row\ input\n
comment5.params=move\ symbol
comment5.target=boolean\ executeMove(Move,\ char)
comment5.text=\n\ Marks\ the\ game\ board\ at\ the\ specificed\ location\ via\ Move\ with\ a\ symbol\n\ calls\ isValidMove(Move)\ to\ determine\ if\ Move\ can\ be\ executed\n\ \n\ @param\ a\ Move\ -\ Move\ to\ be\ executed\n\ @param\ symbol\ -\ object\ player's\ symbol\n\ @return\ true\ if\ move\ was\ properly\ executed,\ false\ if\ move\ was\ invalid\n
comment6.params=
comment6.target=char\ getGameStatus()
comment6.text=\n\ Evaluates\ the\ game\ board\ to\ determine\ if\ the\ game\ is\ over\n\ Iterates\ through\ the\ rows,\ columns,\ and\ diagnols\ of\ the\ board\n\ if\ row,\ column,\ or\ diagnol\ have\ all\ same\ symbol,\ if\ they\ do\ player\ with\ that\ symbol\ wins\n\ returns\ winning\ players\ symbol,\ or\ T\ if\ tie,\ or\ ?\ if\ game\ is\ not\ over\n\ \n\ @return\ '?'\ if\ game\ is\ not\ over,\ 'T'\ if\ game\ ends\ in\ tie,\ or\ 'X'/'O'\ if\ user/cpu\ wins\n
comment7.params=
comment7.target=java.lang.String\ toString()
comment7.text=\n\ Creates\ a\ neat\ textual\ representation\ of\ the\ game\ board\n\ \n\ @return\ A\ String\ that\ represents\ the\ current\ game\ board\n
comment8.params=
comment8.target=char\ playSingleGame()
comment8.text=\n\ Plays\ a\ single\ game\ of\ tic-tac-toe\ by\:\n\ deciding\ if\ user\ or\ player\ goes\ first,\n\ if\ cpu\ goes\ first,\ cpu\ generates\ (row,\ col),\ executes\ move,\ and\ prints\ board\n\ if\ user\ goes\ first,\ user\ enters\ (row,\ col),\ executes\ move,\ and\ prints\ board\n\ loops\ this\ process\ for\ as\ long\ as\ the\ game\ is\ not\ over,\ returns\ symbol\ that\ shows\ result\n\ \n\ @return\ 'H'\ if\ user\ wins,\ 'C'\ if\ computer\ wins,\ 'T'\ if\ game\ ends\ in\ tie,\ or\ 'Q'\ if\ user\ quits\n\ \n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\n\ Runs\ consecutive\ tic-tac-toe\ games\ by\ implement\ playSingleGame()\n\ Continuosly\ runs\ game\ until\ user\ quits\n\ once\ user\ quits\ it\ should\ display\ the\ GameStats\ for\ that\ sequence\ of\ games\n\ \n\ @param\ arg\ -\ user\ entered\ boardsize,\ should\ be\ [1,\ 9]\ if\ not\ default\ to\ 3x3\n\ @throws\ IndexOutOfBoundsException\ if\ boardsize\ not\ in\ range\n
numComments=10
